// <auto-generated />
using System;
using KWishes.Core.Application.Misc;
using KWishes.Core.Domain;
using KWishes.Core.Domain.Users;
using KWishes.Core.Domain.Wishes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KWishes.Core.Application.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231211093339_AddedWishesAndProducts")]
    partial class AddedWishesAndProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role", new[] { "user", "moderator", "admin" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "vote_type", new[] { "wish_vote", "comment_vote" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "wish_status", new[] { "moderation", "in_process", "rejected", "completed" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KWishes.Core.Domain.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_name_1");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("KWishes.Core.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("GoogleNameId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("google_name_id");

                    b.Property<Role>("Role")
                        .HasColumnType("role")
                        .HasColumnName("role");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("second_name");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_email_1");

                    b.HasIndex("GoogleNameId")
                        .IsUnique()
                        .HasDatabaseName("ix_google_name_id_1");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_username_1");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("KWishes.Core.Domain.Wishes.Wish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer")
                        .HasColumnName("comment_count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsVisibleForUsers")
                        .HasColumnType("boolean")
                        .HasColumnName("is_visible_for_users");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_at");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_id");

                    b.Property<WishStatus>("Status")
                        .HasColumnType("wish_status")
                        .HasColumnName("status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer")
                        .HasColumnName("vote_count");

                    b.HasKey("Id")
                        .HasName("pk_wishes");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_creator_id_1");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_id_1");

                    b.ToTable("wishes", (string)null);
                });

            modelBuilder.Entity("KWishes.Core.Domain.Wishes.Wish", b =>
                {
                    b.HasOne("KWishes.Core.Domain.Users.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wishes_users_creator_temp_id");

                    b.HasOne("KWishes.Core.Domain.Products.Product", "Product")
                        .WithMany("Wishes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wishes_products_product_id");

                    b.Navigation("Creator");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KWishes.Core.Domain.Products.Product", b =>
                {
                    b.Navigation("Wishes");
                });
#pragma warning restore 612, 618
        }
    }
}
